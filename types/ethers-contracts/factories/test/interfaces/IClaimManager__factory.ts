/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

  import { Contract, Interface, type ContractRunner } from "ethers";
  import type { IClaimManager, IClaimManagerInterface } from "../../../test/interfaces/IClaimManager.js";

  const _abi = [
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "claimId",
        "type": "uint256"
      }
    ],
    "name": "claims",
    "outputs": [
      {
        "components": [
          {
            "internalType": "bytes32",
            "name": "policyId",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "claimant",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          },
          {
            "internalType": "uint64",
            "name": "startTs",
            "type": "uint64"
          },
          {
            "internalType": "uint64",
            "name": "endTs",
            "type": "uint64"
          },
          {
            "internalType": "uint64",
            "name": "dstChainSelector",
            "type": "uint64"
          },
          {
            "internalType": "bytes",
            "name": "dstPayoutVault",
            "type": "bytes"
          },
          {
            "internalType": "bool",
            "name": "finalized",
            "type": "bool"
          },
          {
            "internalType": "bool",
            "name": "approved",
            "type": "bool"
          },
          {
            "internalType": "uint256",
            "name": "yes",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "no",
            "type": "uint256"
          }
        ],
        "internalType": "struct IClaimManager.Claim",
        "name": "",
        "type": "tuple"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "claimId",
        "type": "uint256"
      }
    ],
    "name": "finalizeClaim",
    "outputs": [],
    "stateMutability": "payable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "bytes32",
        "name": "policyId",
        "type": "bytes32"
      },
      {
        "internalType": "address",
        "name": "claimantOnArbitrum",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "amountPYUSD",
        "type": "uint256"
      },
      {
        "internalType": "uint64",
        "name": "dstChainSelector",
        "type": "uint64"
      },
      {
        "internalType": "bytes",
        "name": "dstPayoutVault",
        "type": "bytes"
      }
    ],
    "name": "openClaim",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "claimId",
        "type": "uint256"
      }
    ],
    "name": "voteNo",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "claimId",
        "type": "uint256"
      }
    ],
    "name": "voteYes",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }
] as const;

  export class IClaimManager__factory {
    static readonly abi = _abi;
    static createInterface(): IClaimManagerInterface {
      return new Interface(_abi) as IClaimManagerInterface;
    }
    static connect(address: string, runner?: ContractRunner | null): IClaimManager {
      return new Contract(address, _abi, runner) as unknown as IClaimManager;
    }
  }
  