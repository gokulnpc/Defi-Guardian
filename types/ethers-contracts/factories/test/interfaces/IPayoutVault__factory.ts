/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

  import { Contract, Interface, type ContractRunner } from "ethers";
  import type { IPayoutVault, IPayoutVaultInterface } from "../../../test/interfaces/IPayoutVault.js";

  const _abi = [
  {
    "inputs": [
      {
        "internalType": "bytes",
        "name": "sender",
        "type": "bytes"
      },
      {
        "internalType": "bool",
        "name": "allowed",
        "type": "bool"
      }
    ],
    "name": "allowlistSender",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint64",
        "name": "selector",
        "type": "uint64"
      },
      {
        "internalType": "bool",
        "name": "allowed",
        "type": "bool"
      }
    ],
    "name": "allowlistSourceChain",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "bytes",
        "name": "message",
        "type": "bytes"
      }
    ],
    "name": "ccipReceive",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "depositPYUSD",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }
] as const;

  export class IPayoutVault__factory {
    static readonly abi = _abi;
    static createInterface(): IPayoutVaultInterface {
      return new Interface(_abi) as IPayoutVaultInterface;
    }
    static connect(address: string, runner?: ContractRunner | null): IPayoutVault {
      return new Contract(address, _abi, runner) as unknown as IPayoutVault;
    }
  }
  