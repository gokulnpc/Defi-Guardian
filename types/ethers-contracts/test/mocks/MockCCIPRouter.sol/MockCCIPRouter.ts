/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../../../common.js"
  
export declare namespace Client {
      
    export type EVMTokenAmountStruct = {token: AddressLike, amount: BigNumberish}

    export type EVMTokenAmountStructOutput = [token: string, amount: bigint] & {token: string, amount: bigint }
  

    export type EVM2AnyMessageStruct = {receiver: BytesLike, data: BytesLike, tokenAmounts: Client.EVMTokenAmountStruct[], feeToken: AddressLike, extraArgs: BytesLike}

    export type EVM2AnyMessageStructOutput = [receiver: string, data: string, tokenAmounts: Client.EVMTokenAmountStructOutput[], feeToken: string, extraArgs: string] & {receiver: string, data: string, tokenAmounts: Client.EVMTokenAmountStructOutput[], feeToken: string, extraArgs: string }
  

    export type Any2EVMMessageStruct = {messageId: BytesLike, sourceChainSelector: BigNumberish, sender: BytesLike, data: BytesLike, destTokenAmounts: Client.EVMTokenAmountStruct[]}

    export type Any2EVMMessageStructOutput = [messageId: string, sourceChainSelector: bigint, sender: string, data: string, destTokenAmounts: Client.EVMTokenAmountStructOutput[]] & {messageId: string, sourceChainSelector: bigint, sender: string, data: string, destTokenAmounts: Client.EVMTokenAmountStructOutput[] }
  
    }

  export interface MockCCIPRouterInterface extends Interface {
    getFunction(nameOrSignature: "ccipSend" | "deliverMessage" | "fee" | "getFee" | "processedMessages"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "MessageSent"): EventFragment;

    encodeFunctionData(functionFragment: 'ccipSend', values: [BigNumberish, Client.EVM2AnyMessageStruct]): string;
encodeFunctionData(functionFragment: 'deliverMessage', values: [AddressLike, Client.Any2EVMMessageStruct]): string;
encodeFunctionData(functionFragment: 'fee', values?: undefined): string;
encodeFunctionData(functionFragment: 'getFee', values: [BigNumberish, Client.EVM2AnyMessageStruct]): string;
encodeFunctionData(functionFragment: 'processedMessages', values: [BytesLike]): string;

    decodeFunctionResult(functionFragment: 'ccipSend', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'deliverMessage', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'fee', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getFee', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'processedMessages', data: BytesLike): Result;
  }

  
    export namespace MessageSentEvent {
      export type InputTuple = [messageId: BytesLike, destinationChainSelector: BigNumberish, receiver: BytesLike, data: BytesLike];
      export type OutputTuple = [messageId: string, destinationChainSelector: bigint, receiver: string, data: string];
      export interface OutputObject {messageId: string, destinationChainSelector: bigint, receiver: string, data: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface MockCCIPRouter extends BaseContract {
    
    connect(runner?: ContractRunner | null): MockCCIPRouter;
    waitForDeployment(): Promise<this>;

    interface: MockCCIPRouterInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    ccipSend: TypedContractMethod<
      [destinationChainSelector: BigNumberish, message: Client.EVM2AnyMessageStruct, ],
      [string],
      'payable'
    >
    

    
    deliverMessage: TypedContractMethod<
      [receiver: AddressLike, message: Client.Any2EVMMessageStruct, ],
      [void],
      'nonpayable'
    >
    

    
    fee: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getFee: TypedContractMethod<
      [destinationChainSelector: BigNumberish, message: Client.EVM2AnyMessageStruct, ],
      [bigint],
      'view'
    >
    

    
    processedMessages: TypedContractMethod<
      [arg0: BytesLike, ],
      [boolean],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'ccipSend'): TypedContractMethod<
      [destinationChainSelector: BigNumberish, message: Client.EVM2AnyMessageStruct, ],
      [string],
      'payable'
    >;
getFunction(nameOrSignature: 'deliverMessage'): TypedContractMethod<
      [receiver: AddressLike, message: Client.Any2EVMMessageStruct, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'fee'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getFee'): TypedContractMethod<
      [destinationChainSelector: BigNumberish, message: Client.EVM2AnyMessageStruct, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'processedMessages'): TypedContractMethod<
      [arg0: BytesLike, ],
      [boolean],
      'view'
    >;

    getEvent(key: 'MessageSent'): TypedContractEvent<MessageSentEvent.InputTuple, MessageSentEvent.OutputTuple, MessageSentEvent.OutputObject>;

    filters: {
      
      'MessageSent(bytes32,uint64,bytes,bytes)': TypedContractEvent<MessageSentEvent.InputTuple, MessageSentEvent.OutputTuple, MessageSentEvent.OutputObject>;
      MessageSent: TypedContractEvent<MessageSentEvent.InputTuple, MessageSentEvent.OutputTuple, MessageSentEvent.OutputObject>;
    
    };
  }