/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "../../common.js"
  
export declare namespace IPremiumVault {
      
    export type PolicyTermsStruct = {poolId: BytesLike, coverageAmount: BigNumberish, startTs: BigNumberish, endTs: BigNumberish, policyRef: BytesLike}

    export type PolicyTermsStructOutput = [poolId: string, coverageAmount: bigint, startTs: bigint, endTs: bigint, policyRef: string] & {poolId: string, coverageAmount: bigint, startTs: bigint, endTs: bigint, policyRef: string }
  
    }

  export interface IPremiumVaultInterface extends Interface {
    getFunction(nameOrSignature: "buyCoverage" | "previewAllocation" | "quoteCCIPFee"): FunctionFragment;

    

    encodeFunctionData(functionFragment: 'buyCoverage', values: [BigNumberish, BytesLike, IPremiumVault.PolicyTermsStruct, BigNumberish]): string;
encodeFunctionData(functionFragment: 'previewAllocation', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'quoteCCIPFee', values: [BigNumberish, BytesLike, IPremiumVault.PolicyTermsStruct]): string;

    decodeFunctionResult(functionFragment: 'buyCoverage', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'previewAllocation', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'quoteCCIPFee', data: BytesLike): Result;
  }

  

  export interface IPremiumVault extends BaseContract {
    
    connect(runner?: ContractRunner | null): IPremiumVault;
    waitForDeployment(): Promise<this>;

    interface: IPremiumVaultInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    buyCoverage: TypedContractMethod<
      [dstChainSelector: BigNumberish, hederaReceiver: BytesLike, terms: IPremiumVault.PolicyTermsStruct, premiumPYUSD: BigNumberish, ],
      [string],
      'payable'
    >
    

    
    previewAllocation: TypedContractMethod<
      [premiumPYUSD: BigNumberish, ],
      [[bigint, bigint] & {toLP: bigint, toReserve: bigint }],
      'view'
    >
    

    
    quoteCCIPFee: TypedContractMethod<
      [dstChainSelector: BigNumberish, hederaReceiver: BytesLike, terms: IPremiumVault.PolicyTermsStruct, ],
      [bigint],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'buyCoverage'): TypedContractMethod<
      [dstChainSelector: BigNumberish, hederaReceiver: BytesLike, terms: IPremiumVault.PolicyTermsStruct, premiumPYUSD: BigNumberish, ],
      [string],
      'payable'
    >;
getFunction(nameOrSignature: 'previewAllocation'): TypedContractMethod<
      [premiumPYUSD: BigNumberish, ],
      [[bigint, bigint] & {toLP: bigint, toReserve: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'quoteCCIPFee'): TypedContractMethod<
      [dstChainSelector: BigNumberish, hederaReceiver: BytesLike, terms: IPremiumVault.PolicyTermsStruct, ],
      [bigint],
      'view'
    >;

    

    filters: {
      
    };
  }