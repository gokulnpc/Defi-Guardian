/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "../../common.js"
  

  export interface IPayoutVaultInterface extends Interface {
    getFunction(nameOrSignature: "allowlistSender" | "allowlistSourceChain" | "ccipReceive" | "depositPYUSD"): FunctionFragment;

    

    encodeFunctionData(functionFragment: 'allowlistSender', values: [BytesLike, boolean]): string;
encodeFunctionData(functionFragment: 'allowlistSourceChain', values: [BigNumberish, boolean]): string;
encodeFunctionData(functionFragment: 'ccipReceive', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'depositPYUSD', values: [BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'allowlistSender', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'allowlistSourceChain', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'ccipReceive', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'depositPYUSD', data: BytesLike): Result;
  }

  

  export interface IPayoutVault extends BaseContract {
    
    connect(runner?: ContractRunner | null): IPayoutVault;
    waitForDeployment(): Promise<this>;

    interface: IPayoutVaultInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    allowlistSender: TypedContractMethod<
      [sender: BytesLike, allowed: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    allowlistSourceChain: TypedContractMethod<
      [selector: BigNumberish, allowed: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    ccipReceive: TypedContractMethod<
      [message: BytesLike, ],
      [void],
      'nonpayable'
    >
    

    
    depositPYUSD: TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'allowlistSender'): TypedContractMethod<
      [sender: BytesLike, allowed: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'allowlistSourceChain'): TypedContractMethod<
      [selector: BigNumberish, allowed: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'ccipReceive'): TypedContractMethod<
      [message: BytesLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'depositPYUSD'): TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;

    

    filters: {
      
    };
  }