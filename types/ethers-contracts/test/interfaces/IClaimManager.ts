/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "../../common.js"
  
export declare namespace IClaimManager {
      
    export type ClaimStruct = {policyId: BytesLike, claimant: AddressLike, amount: BigNumberish, startTs: BigNumberish, endTs: BigNumberish, dstChainSelector: BigNumberish, dstPayoutVault: BytesLike, finalized: boolean, approved: boolean, yes: BigNumberish, no: BigNumberish}

    export type ClaimStructOutput = [policyId: string, claimant: string, amount: bigint, startTs: bigint, endTs: bigint, dstChainSelector: bigint, dstPayoutVault: string, finalized: boolean, approved: boolean, yes: bigint, no: bigint] & {policyId: string, claimant: string, amount: bigint, startTs: bigint, endTs: bigint, dstChainSelector: bigint, dstPayoutVault: string, finalized: boolean, approved: boolean, yes: bigint, no: bigint }
  
    }

  export interface IClaimManagerInterface extends Interface {
    getFunction(nameOrSignature: "claims" | "finalizeClaim" | "openClaim" | "voteNo" | "voteYes"): FunctionFragment;

    

    encodeFunctionData(functionFragment: 'claims', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'finalizeClaim', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'openClaim', values: [BytesLike, AddressLike, BigNumberish, BigNumberish, BytesLike]): string;
encodeFunctionData(functionFragment: 'voteNo', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'voteYes', values: [BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'claims', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'finalizeClaim', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'openClaim', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'voteNo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'voteYes', data: BytesLike): Result;
  }

  

  export interface IClaimManager extends BaseContract {
    
    connect(runner?: ContractRunner | null): IClaimManager;
    waitForDeployment(): Promise<this>;

    interface: IClaimManagerInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    claims: TypedContractMethod<
      [claimId: BigNumberish, ],
      [IClaimManager.ClaimStructOutput],
      'view'
    >
    

    
    finalizeClaim: TypedContractMethod<
      [claimId: BigNumberish, ],
      [void],
      'payable'
    >
    

    
    openClaim: TypedContractMethod<
      [policyId: BytesLike, claimantOnArbitrum: AddressLike, amountPYUSD: BigNumberish, dstChainSelector: BigNumberish, dstPayoutVault: BytesLike, ],
      [void],
      'nonpayable'
    >
    

    
    voteNo: TypedContractMethod<
      [claimId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    voteYes: TypedContractMethod<
      [claimId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'claims'): TypedContractMethod<
      [claimId: BigNumberish, ],
      [IClaimManager.ClaimStructOutput],
      'view'
    >;
getFunction(nameOrSignature: 'finalizeClaim'): TypedContractMethod<
      [claimId: BigNumberish, ],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'openClaim'): TypedContractMethod<
      [policyId: BytesLike, claimantOnArbitrum: AddressLike, amountPYUSD: BigNumberish, dstChainSelector: BigNumberish, dstPayoutVault: BytesLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'voteNo'): TypedContractMethod<
      [claimId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'voteYes'): TypedContractMethod<
      [claimId: BigNumberish, ],
      [void],
      'nonpayable'
    >;

    

    filters: {
      
    };
  }