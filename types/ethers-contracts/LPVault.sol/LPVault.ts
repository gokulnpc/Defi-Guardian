/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface LPVaultInterface extends Interface {
    getFunction(nameOrSignature: "COOLDOWN" | "PYUSD" | "deposit" | "finalizeWithdraw" | "gasLimits" | "owner" | "receivers" | "renounceOwnership" | "requestWithdraw" | "router" | "setGasLimit" | "setReceiver" | "stakes" | "totalShares" | "transferOwnership" | "withdrawQueue"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "Deposit" | "FinalizeWithdraw" | "GasLimitSet" | "OwnershipTransferred" | "ReceiverSet" | "RequestWithdraw" | "SyncToHedera"): EventFragment;

    encodeFunctionData(functionFragment: 'COOLDOWN', values?: undefined): string;
encodeFunctionData(functionFragment: 'PYUSD', values?: undefined): string;
encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'finalizeWithdraw', values?: undefined): string;
encodeFunctionData(functionFragment: 'gasLimits', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'receivers', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'requestWithdraw', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'router', values?: undefined): string;
encodeFunctionData(functionFragment: 'setGasLimit', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'setReceiver', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'stakes', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'totalShares', values?: undefined): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'withdrawQueue', values: [AddressLike]): string;

    decodeFunctionResult(functionFragment: 'COOLDOWN', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'PYUSD', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'finalizeWithdraw', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'gasLimits', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'receivers', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'requestWithdraw', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'router', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setGasLimit', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setReceiver', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'stakes', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalShares', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdrawQueue', data: BytesLike): Result;
  }

  
    export namespace DepositEvent {
      export type InputTuple = [lp: AddressLike, amount: BigNumberish, shares: BigNumberish];
      export type OutputTuple = [lp: string, amount: bigint, shares: bigint];
      export interface OutputObject {lp: string, amount: bigint, shares: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace FinalizeWithdrawEvent {
      export type InputTuple = [lp: AddressLike, shares: BigNumberish, amount: BigNumberish];
      export type OutputTuple = [lp: string, shares: bigint, amount: bigint];
      export interface OutputObject {lp: string, shares: bigint, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace GasLimitSetEvent {
      export type InputTuple = [destinationChainSelector: BigNumberish, gasLimit: BigNumberish];
      export type OutputTuple = [destinationChainSelector: bigint, gasLimit: bigint];
      export interface OutputObject {destinationChainSelector: bigint, gasLimit: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ReceiverSetEvent {
      export type InputTuple = [destinationChainSelector: BigNumberish, receiver: AddressLike];
      export type OutputTuple = [destinationChainSelector: bigint, receiver: string];
      export interface OutputObject {destinationChainSelector: bigint, receiver: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RequestWithdrawEvent {
      export type InputTuple = [lp: AddressLike, shares: BigNumberish, unlockTime: BigNumberish];
      export type OutputTuple = [lp: string, shares: bigint, unlockTime: bigint];
      export interface OutputObject {lp: string, shares: bigint, unlockTime: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace SyncToHederaEvent {
      export type InputTuple = [lp: AddressLike, shares: BigNumberish, lockedUntil: BigNumberish];
      export type OutputTuple = [lp: string, shares: bigint, lockedUntil: bigint];
      export interface OutputObject {lp: string, shares: bigint, lockedUntil: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface LPVault extends BaseContract {
    
    connect(runner?: ContractRunner | null): LPVault;
    waitForDeployment(): Promise<this>;

    interface: LPVaultInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    COOLDOWN: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    PYUSD: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    deposit: TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    finalizeWithdraw: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    gasLimits: TypedContractMethod<
      [arg0: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    receivers: TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    requestWithdraw: TypedContractMethod<
      [shares: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    router: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    setGasLimit: TypedContractMethod<
      [destinationChainSelector: BigNumberish, gasLimit: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    setReceiver: TypedContractMethod<
      [destinationChainSelector: BigNumberish, receiver: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    stakes: TypedContractMethod<
      [arg0: AddressLike, ],
      [[bigint, bigint] & {shares: bigint, lockedUntil: bigint }],
      'view'
    >
    

    
    totalShares: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    withdrawQueue: TypedContractMethod<
      [arg0: AddressLike, ],
      [[bigint, bigint] & {shares: bigint, unlockTimestamp: bigint }],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'COOLDOWN'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'PYUSD'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'deposit'): TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'finalizeWithdraw'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'gasLimits'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'receivers'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'requestWithdraw'): TypedContractMethod<
      [shares: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'router'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'setGasLimit'): TypedContractMethod<
      [destinationChainSelector: BigNumberish, gasLimit: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setReceiver'): TypedContractMethod<
      [destinationChainSelector: BigNumberish, receiver: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'stakes'): TypedContractMethod<
      [arg0: AddressLike, ],
      [[bigint, bigint] & {shares: bigint, lockedUntil: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'totalShares'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdrawQueue'): TypedContractMethod<
      [arg0: AddressLike, ],
      [[bigint, bigint] & {shares: bigint, unlockTimestamp: bigint }],
      'view'
    >;

    getEvent(key: 'Deposit'): TypedContractEvent<DepositEvent.InputTuple, DepositEvent.OutputTuple, DepositEvent.OutputObject>;
getEvent(key: 'FinalizeWithdraw'): TypedContractEvent<FinalizeWithdrawEvent.InputTuple, FinalizeWithdrawEvent.OutputTuple, FinalizeWithdrawEvent.OutputObject>;
getEvent(key: 'GasLimitSet'): TypedContractEvent<GasLimitSetEvent.InputTuple, GasLimitSetEvent.OutputTuple, GasLimitSetEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'ReceiverSet'): TypedContractEvent<ReceiverSetEvent.InputTuple, ReceiverSetEvent.OutputTuple, ReceiverSetEvent.OutputObject>;
getEvent(key: 'RequestWithdraw'): TypedContractEvent<RequestWithdrawEvent.InputTuple, RequestWithdrawEvent.OutputTuple, RequestWithdrawEvent.OutputObject>;
getEvent(key: 'SyncToHedera'): TypedContractEvent<SyncToHederaEvent.InputTuple, SyncToHederaEvent.OutputTuple, SyncToHederaEvent.OutputObject>;

    filters: {
      
      'Deposit(address,uint256,uint256)': TypedContractEvent<DepositEvent.InputTuple, DepositEvent.OutputTuple, DepositEvent.OutputObject>;
      Deposit: TypedContractEvent<DepositEvent.InputTuple, DepositEvent.OutputTuple, DepositEvent.OutputObject>;
    

      'FinalizeWithdraw(address,uint256,uint256)': TypedContractEvent<FinalizeWithdrawEvent.InputTuple, FinalizeWithdrawEvent.OutputTuple, FinalizeWithdrawEvent.OutputObject>;
      FinalizeWithdraw: TypedContractEvent<FinalizeWithdrawEvent.InputTuple, FinalizeWithdrawEvent.OutputTuple, FinalizeWithdrawEvent.OutputObject>;
    

      'GasLimitSet(uint64,uint256)': TypedContractEvent<GasLimitSetEvent.InputTuple, GasLimitSetEvent.OutputTuple, GasLimitSetEvent.OutputObject>;
      GasLimitSet: TypedContractEvent<GasLimitSetEvent.InputTuple, GasLimitSetEvent.OutputTuple, GasLimitSetEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'ReceiverSet(uint64,address)': TypedContractEvent<ReceiverSetEvent.InputTuple, ReceiverSetEvent.OutputTuple, ReceiverSetEvent.OutputObject>;
      ReceiverSet: TypedContractEvent<ReceiverSetEvent.InputTuple, ReceiverSetEvent.OutputTuple, ReceiverSetEvent.OutputObject>;
    

      'RequestWithdraw(address,uint256,uint256)': TypedContractEvent<RequestWithdrawEvent.InputTuple, RequestWithdrawEvent.OutputTuple, RequestWithdrawEvent.OutputObject>;
      RequestWithdraw: TypedContractEvent<RequestWithdrawEvent.InputTuple, RequestWithdrawEvent.OutputTuple, RequestWithdrawEvent.OutputObject>;
    

      'SyncToHedera(address,uint256,uint256)': TypedContractEvent<SyncToHederaEvent.InputTuple, SyncToHederaEvent.OutputTuple, SyncToHederaEvent.OutputObject>;
      SyncToHedera: TypedContractEvent<SyncToHederaEvent.InputTuple, SyncToHederaEvent.OutputTuple, SyncToHederaEvent.OutputObject>;
    
    };
  }