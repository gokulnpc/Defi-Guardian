/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../../common.js"
  

  export interface VotingMirrorInterface extends Interface {
    getFunction(nameOrSignature: "allowlistSender" | "allowlistSourceChain" | "allowlistedSenders" | "allowlistedSourceChains" | "owner" | "processedMessages" | "renounceOwnership" | "router" | "totalPower" | "totalPowerCached" | "transferOwnership" | "vPower" | "vPowerOf"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred" | "PowerSet" | "SenderAllowlisted" | "SourceChainAllowlisted"): EventFragment;

    encodeFunctionData(functionFragment: 'allowlistSender', values: [BytesLike, boolean]): string;
encodeFunctionData(functionFragment: 'allowlistSourceChain', values: [BigNumberish, boolean]): string;
encodeFunctionData(functionFragment: 'allowlistedSenders', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'allowlistedSourceChains', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'processedMessages', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'router', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalPower', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalPowerCached', values?: undefined): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'vPower', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'vPowerOf', values: [AddressLike]): string;

    decodeFunctionResult(functionFragment: 'allowlistSender', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'allowlistSourceChain', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'allowlistedSenders', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'allowlistedSourceChains', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'processedMessages', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'router', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalPower', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalPowerCached', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'vPower', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'vPowerOf', data: BytesLike): Result;
  }

  
    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PowerSetEvent {
      export type InputTuple = [lp: AddressLike, power: BigNumberish, totalPower: BigNumberish];
      export type OutputTuple = [lp: string, power: bigint, totalPower: bigint];
      export interface OutputObject {lp: string, power: bigint, totalPower: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace SenderAllowlistedEvent {
      export type InputTuple = [sender: BytesLike, allowed: boolean];
      export type OutputTuple = [sender: string, allowed: boolean];
      export interface OutputObject {sender: string, allowed: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace SourceChainAllowlistedEvent {
      export type InputTuple = [selector: BigNumberish, allowed: boolean];
      export type OutputTuple = [selector: bigint, allowed: boolean];
      export interface OutputObject {selector: bigint, allowed: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface VotingMirror extends BaseContract {
    
    connect(runner?: ContractRunner | null): VotingMirror;
    waitForDeployment(): Promise<this>;

    interface: VotingMirrorInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    allowlistSender: TypedContractMethod<
      [sender: BytesLike, allowed: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    allowlistSourceChain: TypedContractMethod<
      [selector: BigNumberish, allowed: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    allowlistedSenders: TypedContractMethod<
      [arg0: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    allowlistedSourceChains: TypedContractMethod<
      [arg0: BigNumberish, ],
      [boolean],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    processedMessages: TypedContractMethod<
      [arg0: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    router: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    totalPower: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    totalPowerCached: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    vPower: TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    vPowerOf: TypedContractMethod<
      [lp: AddressLike, ],
      [bigint],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'allowlistSender'): TypedContractMethod<
      [sender: BytesLike, allowed: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'allowlistSourceChain'): TypedContractMethod<
      [selector: BigNumberish, allowed: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'allowlistedSenders'): TypedContractMethod<
      [arg0: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'allowlistedSourceChains'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'processedMessages'): TypedContractMethod<
      [arg0: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'router'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'totalPower'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'totalPowerCached'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'vPower'): TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'vPowerOf'): TypedContractMethod<
      [lp: AddressLike, ],
      [bigint],
      'view'
    >;

    getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'PowerSet'): TypedContractEvent<PowerSetEvent.InputTuple, PowerSetEvent.OutputTuple, PowerSetEvent.OutputObject>;
getEvent(key: 'SenderAllowlisted'): TypedContractEvent<SenderAllowlistedEvent.InputTuple, SenderAllowlistedEvent.OutputTuple, SenderAllowlistedEvent.OutputObject>;
getEvent(key: 'SourceChainAllowlisted'): TypedContractEvent<SourceChainAllowlistedEvent.InputTuple, SourceChainAllowlistedEvent.OutputTuple, SourceChainAllowlistedEvent.OutputObject>;

    filters: {
      
      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'PowerSet(address,uint256,uint256)': TypedContractEvent<PowerSetEvent.InputTuple, PowerSetEvent.OutputTuple, PowerSetEvent.OutputObject>;
      PowerSet: TypedContractEvent<PowerSetEvent.InputTuple, PowerSetEvent.OutputTuple, PowerSetEvent.OutputObject>;
    

      'SenderAllowlisted(bytes,bool)': TypedContractEvent<SenderAllowlistedEvent.InputTuple, SenderAllowlistedEvent.OutputTuple, SenderAllowlistedEvent.OutputObject>;
      SenderAllowlisted: TypedContractEvent<SenderAllowlistedEvent.InputTuple, SenderAllowlistedEvent.OutputTuple, SenderAllowlistedEvent.OutputObject>;
    

      'SourceChainAllowlisted(uint64,bool)': TypedContractEvent<SourceChainAllowlistedEvent.InputTuple, SourceChainAllowlistedEvent.OutputTuple, SourceChainAllowlistedEvent.OutputObject>;
      SourceChainAllowlisted: TypedContractEvent<SourceChainAllowlistedEvent.InputTuple, SourceChainAllowlistedEvent.OutputTuple, SourceChainAllowlistedEvent.OutputObject>;
    
    };
  }