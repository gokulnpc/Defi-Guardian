/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  
export declare namespace PremiumVault {
      
    export type PolicyTermsStruct = {poolId: BytesLike, buyer: AddressLike, coverageAmount: BigNumberish, startTs: BigNumberish, endTs: BigNumberish, policyRef: BytesLike}

    export type PolicyTermsStructOutput = [poolId: string, buyer: string, coverageAmount: bigint, startTs: bigint, endTs: bigint, policyRef: string] & {poolId: string, buyer: string, coverageAmount: bigint, startTs: bigint, endTs: bigint, policyRef: string }
  
    }

  export interface PremiumVaultInterface extends Interface {
    getFunction(nameOrSignature: "PYUSD" | "allowlistDestChain" | "allowlistReceiver" | "allowlistedDestChains" | "allowlistedReceivers" | "buyCoverage" | "gasLimitByChain" | "lpVault" | "owner" | "payoutVault" | "premiumBpsToLP" | "premiumBpsToReserve" | "previewAllocation" | "quoteCCIPFee" | "renounceOwnership" | "rescueToken" | "router" | "setGasLimit" | "setRouter" | "setSplit" | "setVaults" | "transferOwnership"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "CCIPSent" | "DestChainAllowlisted" | "GasLimitSet" | "OwnershipTransferred" | "PremiumPaid" | "ReceiverAllowlisted" | "RouterUpdated" | "SplitUpdated" | "VaultsUpdated"): EventFragment;

    encodeFunctionData(functionFragment: 'PYUSD', values?: undefined): string;
encodeFunctionData(functionFragment: 'allowlistDestChain', values: [BigNumberish, boolean]): string;
encodeFunctionData(functionFragment: 'allowlistReceiver', values: [BytesLike, boolean]): string;
encodeFunctionData(functionFragment: 'allowlistedDestChains', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'allowlistedReceivers', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'buyCoverage', values: [BigNumberish, BytesLike, PremiumVault.PolicyTermsStruct, BigNumberish]): string;
encodeFunctionData(functionFragment: 'gasLimitByChain', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'lpVault', values?: undefined): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'payoutVault', values?: undefined): string;
encodeFunctionData(functionFragment: 'premiumBpsToLP', values?: undefined): string;
encodeFunctionData(functionFragment: 'premiumBpsToReserve', values?: undefined): string;
encodeFunctionData(functionFragment: 'previewAllocation', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'quoteCCIPFee', values: [BigNumberish, BytesLike, PremiumVault.PolicyTermsStruct]): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'rescueToken', values: [AddressLike, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'router', values?: undefined): string;
encodeFunctionData(functionFragment: 'setGasLimit', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'setRouter', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'setSplit', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'setVaults', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;

    decodeFunctionResult(functionFragment: 'PYUSD', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'allowlistDestChain', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'allowlistReceiver', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'allowlistedDestChains', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'allowlistedReceivers', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'buyCoverage', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'gasLimitByChain', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'lpVault', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'payoutVault', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'premiumBpsToLP', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'premiumBpsToReserve', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'previewAllocation', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'quoteCCIPFee', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'rescueToken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'router', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setGasLimit', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setRouter', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setSplit', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setVaults', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  }

  
    export namespace CCIPSentEvent {
      export type InputTuple = [messageId: BytesLike, dstSelector: BigNumberish, receiver: BytesLike, feePaidNative: BigNumberish];
      export type OutputTuple = [messageId: string, dstSelector: bigint, receiver: string, feePaidNative: bigint];
      export interface OutputObject {messageId: string, dstSelector: bigint, receiver: string, feePaidNative: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace DestChainAllowlistedEvent {
      export type InputTuple = [selector: BigNumberish, allowed: boolean];
      export type OutputTuple = [selector: bigint, allowed: boolean];
      export interface OutputObject {selector: bigint, allowed: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace GasLimitSetEvent {
      export type InputTuple = [selector: BigNumberish, gasLimit: BigNumberish];
      export type OutputTuple = [selector: bigint, gasLimit: bigint];
      export interface OutputObject {selector: bigint, gasLimit: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PremiumPaidEvent {
      export type InputTuple = [user: AddressLike, premiumPYUSD: BigNumberish, toLP: BigNumberish, toReserve: BigNumberish, ccipMessageId: BytesLike];
      export type OutputTuple = [user: string, premiumPYUSD: bigint, toLP: bigint, toReserve: bigint, ccipMessageId: string];
      export interface OutputObject {user: string, premiumPYUSD: bigint, toLP: bigint, toReserve: bigint, ccipMessageId: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ReceiverAllowlistedEvent {
      export type InputTuple = [receiver: BytesLike, allowed: boolean];
      export type OutputTuple = [receiver: string, allowed: boolean];
      export interface OutputObject {receiver: string, allowed: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RouterUpdatedEvent {
      export type InputTuple = [router: AddressLike];
      export type OutputTuple = [router: string];
      export interface OutputObject {router: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace SplitUpdatedEvent {
      export type InputTuple = [bpsToLP: BigNumberish, bpsToReserve: BigNumberish];
      export type OutputTuple = [bpsToLP: bigint, bpsToReserve: bigint];
      export interface OutputObject {bpsToLP: bigint, bpsToReserve: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace VaultsUpdatedEvent {
      export type InputTuple = [lpVault: AddressLike, payoutVault: AddressLike];
      export type OutputTuple = [lpVault: string, payoutVault: string];
      export interface OutputObject {lpVault: string, payoutVault: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface PremiumVault extends BaseContract {
    
    connect(runner?: ContractRunner | null): PremiumVault;
    waitForDeployment(): Promise<this>;

    interface: PremiumVaultInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    PYUSD: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    allowlistDestChain: TypedContractMethod<
      [selector: BigNumberish, allowed: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    allowlistReceiver: TypedContractMethod<
      [receiver: BytesLike, allowed: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    allowlistedDestChains: TypedContractMethod<
      [arg0: BigNumberish, ],
      [boolean],
      'view'
    >
    

    
    allowlistedReceivers: TypedContractMethod<
      [arg0: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    buyCoverage: TypedContractMethod<
      [dstChainSelector: BigNumberish, hederaReceiver: BytesLike, terms: PremiumVault.PolicyTermsStruct, premiumPYUSD: BigNumberish, ],
      [string],
      'payable'
    >
    

    
    gasLimitByChain: TypedContractMethod<
      [arg0: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    lpVault: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    payoutVault: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    premiumBpsToLP: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    premiumBpsToReserve: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    previewAllocation: TypedContractMethod<
      [premiumPYUSD: BigNumberish, ],
      [[bigint, bigint] & {toLP: bigint, toReserve: bigint }],
      'view'
    >
    

    
    quoteCCIPFee: TypedContractMethod<
      [dstChainSelector: BigNumberish, hederaReceiver: BytesLike, terms: PremiumVault.PolicyTermsStruct, ],
      [bigint],
      'view'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    rescueToken: TypedContractMethod<
      [token: AddressLike, to: AddressLike, amt: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    router: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    setGasLimit: TypedContractMethod<
      [selector: BigNumberish, gasLimit: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    setRouter: TypedContractMethod<
      [_router: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    setSplit: TypedContractMethod<
      [bpsToLP_: BigNumberish, bpsToReserve_: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    setVaults: TypedContractMethod<
      [_lpVault: AddressLike, _payoutVault: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'PYUSD'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'allowlistDestChain'): TypedContractMethod<
      [selector: BigNumberish, allowed: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'allowlistReceiver'): TypedContractMethod<
      [receiver: BytesLike, allowed: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'allowlistedDestChains'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'allowlistedReceivers'): TypedContractMethod<
      [arg0: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'buyCoverage'): TypedContractMethod<
      [dstChainSelector: BigNumberish, hederaReceiver: BytesLike, terms: PremiumVault.PolicyTermsStruct, premiumPYUSD: BigNumberish, ],
      [string],
      'payable'
    >;
getFunction(nameOrSignature: 'gasLimitByChain'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'lpVault'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'payoutVault'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'premiumBpsToLP'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'premiumBpsToReserve'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'previewAllocation'): TypedContractMethod<
      [premiumPYUSD: BigNumberish, ],
      [[bigint, bigint] & {toLP: bigint, toReserve: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'quoteCCIPFee'): TypedContractMethod<
      [dstChainSelector: BigNumberish, hederaReceiver: BytesLike, terms: PremiumVault.PolicyTermsStruct, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'rescueToken'): TypedContractMethod<
      [token: AddressLike, to: AddressLike, amt: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'router'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'setGasLimit'): TypedContractMethod<
      [selector: BigNumberish, gasLimit: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setRouter'): TypedContractMethod<
      [_router: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setSplit'): TypedContractMethod<
      [bpsToLP_: BigNumberish, bpsToReserve_: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setVaults'): TypedContractMethod<
      [_lpVault: AddressLike, _payoutVault: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'CCIPSent'): TypedContractEvent<CCIPSentEvent.InputTuple, CCIPSentEvent.OutputTuple, CCIPSentEvent.OutputObject>;
getEvent(key: 'DestChainAllowlisted'): TypedContractEvent<DestChainAllowlistedEvent.InputTuple, DestChainAllowlistedEvent.OutputTuple, DestChainAllowlistedEvent.OutputObject>;
getEvent(key: 'GasLimitSet'): TypedContractEvent<GasLimitSetEvent.InputTuple, GasLimitSetEvent.OutputTuple, GasLimitSetEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'PremiumPaid'): TypedContractEvent<PremiumPaidEvent.InputTuple, PremiumPaidEvent.OutputTuple, PremiumPaidEvent.OutputObject>;
getEvent(key: 'ReceiverAllowlisted'): TypedContractEvent<ReceiverAllowlistedEvent.InputTuple, ReceiverAllowlistedEvent.OutputTuple, ReceiverAllowlistedEvent.OutputObject>;
getEvent(key: 'RouterUpdated'): TypedContractEvent<RouterUpdatedEvent.InputTuple, RouterUpdatedEvent.OutputTuple, RouterUpdatedEvent.OutputObject>;
getEvent(key: 'SplitUpdated'): TypedContractEvent<SplitUpdatedEvent.InputTuple, SplitUpdatedEvent.OutputTuple, SplitUpdatedEvent.OutputObject>;
getEvent(key: 'VaultsUpdated'): TypedContractEvent<VaultsUpdatedEvent.InputTuple, VaultsUpdatedEvent.OutputTuple, VaultsUpdatedEvent.OutputObject>;

    filters: {
      
      'CCIPSent(bytes32,uint64,bytes,uint256)': TypedContractEvent<CCIPSentEvent.InputTuple, CCIPSentEvent.OutputTuple, CCIPSentEvent.OutputObject>;
      CCIPSent: TypedContractEvent<CCIPSentEvent.InputTuple, CCIPSentEvent.OutputTuple, CCIPSentEvent.OutputObject>;
    

      'DestChainAllowlisted(uint64,bool)': TypedContractEvent<DestChainAllowlistedEvent.InputTuple, DestChainAllowlistedEvent.OutputTuple, DestChainAllowlistedEvent.OutputObject>;
      DestChainAllowlisted: TypedContractEvent<DestChainAllowlistedEvent.InputTuple, DestChainAllowlistedEvent.OutputTuple, DestChainAllowlistedEvent.OutputObject>;
    

      'GasLimitSet(uint64,uint256)': TypedContractEvent<GasLimitSetEvent.InputTuple, GasLimitSetEvent.OutputTuple, GasLimitSetEvent.OutputObject>;
      GasLimitSet: TypedContractEvent<GasLimitSetEvent.InputTuple, GasLimitSetEvent.OutputTuple, GasLimitSetEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'PremiumPaid(address,uint256,uint256,uint256,bytes32)': TypedContractEvent<PremiumPaidEvent.InputTuple, PremiumPaidEvent.OutputTuple, PremiumPaidEvent.OutputObject>;
      PremiumPaid: TypedContractEvent<PremiumPaidEvent.InputTuple, PremiumPaidEvent.OutputTuple, PremiumPaidEvent.OutputObject>;
    

      'ReceiverAllowlisted(bytes,bool)': TypedContractEvent<ReceiverAllowlistedEvent.InputTuple, ReceiverAllowlistedEvent.OutputTuple, ReceiverAllowlistedEvent.OutputObject>;
      ReceiverAllowlisted: TypedContractEvent<ReceiverAllowlistedEvent.InputTuple, ReceiverAllowlistedEvent.OutputTuple, ReceiverAllowlistedEvent.OutputObject>;
    

      'RouterUpdated(address)': TypedContractEvent<RouterUpdatedEvent.InputTuple, RouterUpdatedEvent.OutputTuple, RouterUpdatedEvent.OutputObject>;
      RouterUpdated: TypedContractEvent<RouterUpdatedEvent.InputTuple, RouterUpdatedEvent.OutputTuple, RouterUpdatedEvent.OutputObject>;
    

      'SplitUpdated(uint256,uint256)': TypedContractEvent<SplitUpdatedEvent.InputTuple, SplitUpdatedEvent.OutputTuple, SplitUpdatedEvent.OutputObject>;
      SplitUpdated: TypedContractEvent<SplitUpdatedEvent.InputTuple, SplitUpdatedEvent.OutputTuple, SplitUpdatedEvent.OutputObject>;
    

      'VaultsUpdated(address,address)': TypedContractEvent<VaultsUpdatedEvent.InputTuple, VaultsUpdatedEvent.OutputTuple, VaultsUpdatedEvent.OutputObject>;
      VaultsUpdated: TypedContractEvent<VaultsUpdatedEvent.InputTuple, VaultsUpdatedEvent.OutputTuple, VaultsUpdatedEvent.OutputObject>;
    
    };
  }