/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../../common.js"
  

  export interface PayoutVaultInterface extends Interface {
    getFunction(nameOrSignature: "PYUSD" | "allowlistSender" | "allowlistSourceChain" | "allowlistedSenders" | "allowlistedSourceChains" | "depositPYUSD" | "gasLimitByChain" | "onPremiumReserve" | "owner" | "processedMessages" | "renounceOwnership" | "rescueToken" | "reserveBalance" | "router" | "setGasLimit" | "transferOwnership"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "Funded" | "GasLimitSet" | "OwnershipTransferred" | "PayoutExecuted" | "PremiumReserved" | "Rescued" | "SenderAllowlisted" | "SourceChainAllowlisted"): EventFragment;

    encodeFunctionData(functionFragment: 'PYUSD', values?: undefined): string;
encodeFunctionData(functionFragment: 'allowlistSender', values: [BytesLike, boolean]): string;
encodeFunctionData(functionFragment: 'allowlistSourceChain', values: [BigNumberish, boolean]): string;
encodeFunctionData(functionFragment: 'allowlistedSenders', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'allowlistedSourceChains', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'depositPYUSD', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'gasLimitByChain', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'onPremiumReserve', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'processedMessages', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'rescueToken', values: [AddressLike, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'reserveBalance', values?: undefined): string;
encodeFunctionData(functionFragment: 'router', values?: undefined): string;
encodeFunctionData(functionFragment: 'setGasLimit', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;

    decodeFunctionResult(functionFragment: 'PYUSD', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'allowlistSender', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'allowlistSourceChain', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'allowlistedSenders', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'allowlistedSourceChains', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'depositPYUSD', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'gasLimitByChain', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'onPremiumReserve', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'processedMessages', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'rescueToken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'reserveBalance', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'router', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setGasLimit', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  }

  
    export namespace FundedEvent {
      export type InputTuple = [from: AddressLike, amount: BigNumberish];
      export type OutputTuple = [from: string, amount: bigint];
      export interface OutputObject {from: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace GasLimitSetEvent {
      export type InputTuple = [selector: BigNumberish, gasLimit: BigNumberish];
      export type OutputTuple = [selector: bigint, gasLimit: bigint];
      export interface OutputObject {selector: bigint, gasLimit: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PayoutExecutedEvent {
      export type InputTuple = [messageId: BytesLike, claimId: BigNumberish, to: AddressLike, amount: BigNumberish];
      export type OutputTuple = [messageId: string, claimId: bigint, to: string, amount: bigint];
      export interface OutputObject {messageId: string, claimId: bigint, to: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PremiumReservedEvent {
      export type InputTuple = [amount: BigNumberish, newReserve: BigNumberish];
      export type OutputTuple = [amount: bigint, newReserve: bigint];
      export interface OutputObject {amount: bigint, newReserve: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RescuedEvent {
      export type InputTuple = [token: AddressLike, to: AddressLike, amount: BigNumberish];
      export type OutputTuple = [token: string, to: string, amount: bigint];
      export interface OutputObject {token: string, to: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace SenderAllowlistedEvent {
      export type InputTuple = [sender: BytesLike, allowed: boolean];
      export type OutputTuple = [sender: string, allowed: boolean];
      export interface OutputObject {sender: string, allowed: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace SourceChainAllowlistedEvent {
      export type InputTuple = [selector: BigNumberish, allowed: boolean];
      export type OutputTuple = [selector: bigint, allowed: boolean];
      export interface OutputObject {selector: bigint, allowed: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface PayoutVault extends BaseContract {
    
    connect(runner?: ContractRunner | null): PayoutVault;
    waitForDeployment(): Promise<this>;

    interface: PayoutVaultInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    PYUSD: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    allowlistSender: TypedContractMethod<
      [sender: BytesLike, allowed: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    allowlistSourceChain: TypedContractMethod<
      [selector: BigNumberish, allowed: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    allowlistedSenders: TypedContractMethod<
      [arg0: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    allowlistedSourceChains: TypedContractMethod<
      [arg0: BigNumberish, ],
      [boolean],
      'view'
    >
    

    
    depositPYUSD: TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    gasLimitByChain: TypedContractMethod<
      [arg0: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    onPremiumReserve: TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    processedMessages: TypedContractMethod<
      [arg0: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    rescueToken: TypedContractMethod<
      [token: AddressLike, to: AddressLike, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    reserveBalance: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    router: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    setGasLimit: TypedContractMethod<
      [sourceChainSelector: BigNumberish, gasLimit: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'PYUSD'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'allowlistSender'): TypedContractMethod<
      [sender: BytesLike, allowed: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'allowlistSourceChain'): TypedContractMethod<
      [selector: BigNumberish, allowed: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'allowlistedSenders'): TypedContractMethod<
      [arg0: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'allowlistedSourceChains'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'depositPYUSD'): TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'gasLimitByChain'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'onPremiumReserve'): TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'processedMessages'): TypedContractMethod<
      [arg0: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'rescueToken'): TypedContractMethod<
      [token: AddressLike, to: AddressLike, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'reserveBalance'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'router'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'setGasLimit'): TypedContractMethod<
      [sourceChainSelector: BigNumberish, gasLimit: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'Funded'): TypedContractEvent<FundedEvent.InputTuple, FundedEvent.OutputTuple, FundedEvent.OutputObject>;
getEvent(key: 'GasLimitSet'): TypedContractEvent<GasLimitSetEvent.InputTuple, GasLimitSetEvent.OutputTuple, GasLimitSetEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'PayoutExecuted'): TypedContractEvent<PayoutExecutedEvent.InputTuple, PayoutExecutedEvent.OutputTuple, PayoutExecutedEvent.OutputObject>;
getEvent(key: 'PremiumReserved'): TypedContractEvent<PremiumReservedEvent.InputTuple, PremiumReservedEvent.OutputTuple, PremiumReservedEvent.OutputObject>;
getEvent(key: 'Rescued'): TypedContractEvent<RescuedEvent.InputTuple, RescuedEvent.OutputTuple, RescuedEvent.OutputObject>;
getEvent(key: 'SenderAllowlisted'): TypedContractEvent<SenderAllowlistedEvent.InputTuple, SenderAllowlistedEvent.OutputTuple, SenderAllowlistedEvent.OutputObject>;
getEvent(key: 'SourceChainAllowlisted'): TypedContractEvent<SourceChainAllowlistedEvent.InputTuple, SourceChainAllowlistedEvent.OutputTuple, SourceChainAllowlistedEvent.OutputObject>;

    filters: {
      
      'Funded(address,uint256)': TypedContractEvent<FundedEvent.InputTuple, FundedEvent.OutputTuple, FundedEvent.OutputObject>;
      Funded: TypedContractEvent<FundedEvent.InputTuple, FundedEvent.OutputTuple, FundedEvent.OutputObject>;
    

      'GasLimitSet(uint64,uint256)': TypedContractEvent<GasLimitSetEvent.InputTuple, GasLimitSetEvent.OutputTuple, GasLimitSetEvent.OutputObject>;
      GasLimitSet: TypedContractEvent<GasLimitSetEvent.InputTuple, GasLimitSetEvent.OutputTuple, GasLimitSetEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'PayoutExecuted(bytes32,uint256,address,uint256)': TypedContractEvent<PayoutExecutedEvent.InputTuple, PayoutExecutedEvent.OutputTuple, PayoutExecutedEvent.OutputObject>;
      PayoutExecuted: TypedContractEvent<PayoutExecutedEvent.InputTuple, PayoutExecutedEvent.OutputTuple, PayoutExecutedEvent.OutputObject>;
    

      'PremiumReserved(uint256,uint256)': TypedContractEvent<PremiumReservedEvent.InputTuple, PremiumReservedEvent.OutputTuple, PremiumReservedEvent.OutputObject>;
      PremiumReserved: TypedContractEvent<PremiumReservedEvent.InputTuple, PremiumReservedEvent.OutputTuple, PremiumReservedEvent.OutputObject>;
    

      'Rescued(address,address,uint256)': TypedContractEvent<RescuedEvent.InputTuple, RescuedEvent.OutputTuple, RescuedEvent.OutputObject>;
      Rescued: TypedContractEvent<RescuedEvent.InputTuple, RescuedEvent.OutputTuple, RescuedEvent.OutputObject>;
    

      'SenderAllowlisted(bytes,bool)': TypedContractEvent<SenderAllowlistedEvent.InputTuple, SenderAllowlistedEvent.OutputTuple, SenderAllowlistedEvent.OutputObject>;
      SenderAllowlisted: TypedContractEvent<SenderAllowlistedEvent.InputTuple, SenderAllowlistedEvent.OutputTuple, SenderAllowlistedEvent.OutputObject>;
    

      'SourceChainAllowlisted(uint64,bool)': TypedContractEvent<SourceChainAllowlistedEvent.InputTuple, SourceChainAllowlistedEvent.OutputTuple, SourceChainAllowlistedEvent.OutputObject>;
      SourceChainAllowlisted: TypedContractEvent<SourceChainAllowlistedEvent.InputTuple, SourceChainAllowlistedEvent.OutputTuple, SourceChainAllowlistedEvent.OutputObject>;
    
    };
  }