/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */


import { ethers } from 'ethers'
import { DeployContractOptions, FactoryOptions, HardhatEthersHelpers as HardhatEthersHelpersBase} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from "./index.js";

declare module "@nomicfoundation/hardhat-ethers/types" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
  getContractFactory(name: 'ClaimManager', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.ClaimManager__factory>
getContractFactory(name: 'IPolicyManagerView', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IPolicyManagerView__factory>
getContractFactory(name: 'IRouterClient', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IRouterClient__factory>
getContractFactory(name: 'IVotingMirror', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IVotingMirror__factory>
getContractFactory(name: 'IRouterClient', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IRouterClient__factory>
getContractFactory(name: 'LPVault', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.LPVault__factory>
getContractFactory(name: 'CCIPReceiver', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.CCIPReceiver__factory>
getContractFactory(name: 'IRouterClient', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IRouterClient__factory>
getContractFactory(name: 'PayoutVault', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.PayoutVault__factory>
getContractFactory(name: 'CCIPReceiver', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.CCIPReceiver__factory>
getContractFactory(name: 'IRouterClient', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IRouterClient__factory>
getContractFactory(name: 'PolicyManager', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.PolicyManager__factory>
getContractFactory(name: 'PremiumVault', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.PremiumVault__factory>
getContractFactory(name: 'CCIPReceiver', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.CCIPReceiver__factory>
getContractFactory(name: 'IRouterClient', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IRouterClient__factory>
getContractFactory(name: 'VotingMirror', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.VotingMirror__factory>
getContractFactory(name: 'IRouterClient', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IRouterClient__factory>
getContractFactory(name: 'MockCCIPRouter', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.MockCCIPRouter__factory>
getContractFactory(name: 'MockPYUSD', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.MockPYUSD__factory>
getContractFactory(name: 'IClaimManager', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IClaimManager__factory>
getContractFactory(name: 'ILPVault', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.ILPVault__factory>
getContractFactory(name: 'IPayoutVault', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IPayoutVault__factory>
getContractFactory(name: 'IPolicyManager', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IPolicyManager__factory>
getContractFactory(name: 'IPremiumVault', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IPremiumVault__factory>
getContractFactory(name: 'IVotingMirror', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IVotingMirror__factory>
getContractFactory(name: 'IRouterClient', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IRouterClient__factory>
getContractFactory(name: 'MockCCIPRouter', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.MockCCIPRouter__factory>
getContractFactory(name: 'MockPYUSD', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.MockPYUSD__factory>

  getContractAt(name: 'ClaimManager', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.ClaimManager>
getContractAt(name: 'IPolicyManagerView', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IPolicyManagerView>
getContractAt(name: 'IRouterClient', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IRouterClient>
getContractAt(name: 'IVotingMirror', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IVotingMirror>
getContractAt(name: 'IRouterClient', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IRouterClient>
getContractAt(name: 'LPVault', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.LPVault>
getContractAt(name: 'CCIPReceiver', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.CCIPReceiver>
getContractAt(name: 'IRouterClient', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IRouterClient>
getContractAt(name: 'PayoutVault', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.PayoutVault>
getContractAt(name: 'CCIPReceiver', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.CCIPReceiver>
getContractAt(name: 'IRouterClient', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IRouterClient>
getContractAt(name: 'PolicyManager', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.PolicyManager>
getContractAt(name: 'PremiumVault', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.PremiumVault>
getContractAt(name: 'CCIPReceiver', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.CCIPReceiver>
getContractAt(name: 'IRouterClient', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IRouterClient>
getContractAt(name: 'VotingMirror', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.VotingMirror>
getContractAt(name: 'IRouterClient', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IRouterClient>
getContractAt(name: 'MockCCIPRouter', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.MockCCIPRouter>
getContractAt(name: 'MockPYUSD', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.MockPYUSD>
getContractAt(name: 'IClaimManager', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IClaimManager>
getContractAt(name: 'ILPVault', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.ILPVault>
getContractAt(name: 'IPayoutVault', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IPayoutVault>
getContractAt(name: 'IPolicyManager', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IPolicyManager>
getContractAt(name: 'IPremiumVault', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IPremiumVault>
getContractAt(name: 'IVotingMirror', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IVotingMirror>
getContractAt(name: 'IRouterClient', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IRouterClient>
getContractAt(name: 'MockCCIPRouter', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.MockCCIPRouter>
getContractAt(name: 'MockPYUSD', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.MockPYUSD>

  deployContract(name: 'ClaimManager', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ClaimManager>
deployContract(name: 'IPolicyManagerView', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IPolicyManagerView>
deployContract(name: 'IRouterClient', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IRouterClient>
deployContract(name: 'IVotingMirror', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IVotingMirror>
deployContract(name: 'IRouterClient', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IRouterClient>
deployContract(name: 'LPVault', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.LPVault>
deployContract(name: 'CCIPReceiver', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.CCIPReceiver>
deployContract(name: 'IRouterClient', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IRouterClient>
deployContract(name: 'PayoutVault', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.PayoutVault>
deployContract(name: 'CCIPReceiver', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.CCIPReceiver>
deployContract(name: 'IRouterClient', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IRouterClient>
deployContract(name: 'PolicyManager', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.PolicyManager>
deployContract(name: 'PremiumVault', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.PremiumVault>
deployContract(name: 'CCIPReceiver', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.CCIPReceiver>
deployContract(name: 'IRouterClient', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IRouterClient>
deployContract(name: 'VotingMirror', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.VotingMirror>
deployContract(name: 'IRouterClient', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IRouterClient>
deployContract(name: 'MockCCIPRouter', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockCCIPRouter>
deployContract(name: 'MockPYUSD', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockPYUSD>
deployContract(name: 'IClaimManager', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IClaimManager>
deployContract(name: 'ILPVault', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ILPVault>
deployContract(name: 'IPayoutVault', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IPayoutVault>
deployContract(name: 'IPolicyManager', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IPolicyManager>
deployContract(name: 'IPremiumVault', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IPremiumVault>
deployContract(name: 'IVotingMirror', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IVotingMirror>
deployContract(name: 'IRouterClient', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IRouterClient>
deployContract(name: 'MockCCIPRouter', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockCCIPRouter>
deployContract(name: 'MockPYUSD', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockPYUSD>

  deployContract(name: 'ClaimManager', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ClaimManager>
deployContract(name: 'IPolicyManagerView', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IPolicyManagerView>
deployContract(name: 'IRouterClient', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IRouterClient>
deployContract(name: 'IVotingMirror', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IVotingMirror>
deployContract(name: 'IRouterClient', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IRouterClient>
deployContract(name: 'LPVault', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.LPVault>
deployContract(name: 'CCIPReceiver', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.CCIPReceiver>
deployContract(name: 'IRouterClient', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IRouterClient>
deployContract(name: 'PayoutVault', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.PayoutVault>
deployContract(name: 'CCIPReceiver', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.CCIPReceiver>
deployContract(name: 'IRouterClient', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IRouterClient>
deployContract(name: 'PolicyManager', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.PolicyManager>
deployContract(name: 'PremiumVault', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.PremiumVault>
deployContract(name: 'CCIPReceiver', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.CCIPReceiver>
deployContract(name: 'IRouterClient', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IRouterClient>
deployContract(name: 'VotingMirror', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.VotingMirror>
deployContract(name: 'IRouterClient', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IRouterClient>
deployContract(name: 'MockCCIPRouter', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockCCIPRouter>
deployContract(name: 'MockPYUSD', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockPYUSD>
deployContract(name: 'IClaimManager', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IClaimManager>
deployContract(name: 'ILPVault', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ILPVault>
deployContract(name: 'IPayoutVault', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IPayoutVault>
deployContract(name: 'IPolicyManager', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IPolicyManager>
deployContract(name: 'IPremiumVault', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IPremiumVault>
deployContract(name: 'IVotingMirror', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IVotingMirror>
deployContract(name: 'IRouterClient', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IRouterClient>
deployContract(name: 'MockCCIPRouter', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockCCIPRouter>
deployContract(name: 'MockPYUSD', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockPYUSD>

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
  