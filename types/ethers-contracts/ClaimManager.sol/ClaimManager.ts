/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface ClaimManagerInterface extends Interface {
    getFunction(nameOrSignature: "allowlistDestChain" | "allowlistReceiver" | "allowlistedDestChains" | "allowlistedReceivers" | "claims" | "finalizeClaim" | "gasLimitByChain" | "hasVoted" | "nextClaimId" | "openClaim" | "owner" | "policyManager" | "quorumBps" | "renounceOwnership" | "router" | "setGasLimit" | "setParams" | "setPolicyManager" | "setRouter" | "setVotingMirror" | "transferOwnership" | "voteNo" | "voteYes" | "votingMirror" | "votingPeriodSeconds"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "ClaimFinalized" | "ClaimOpened" | "DestAllowlisted" | "GasLimitSet" | "OwnershipTransferred" | "ParamsUpdated" | "PayoutSent" | "PolicyManagerUpdated" | "ReceiverAllowlisted" | "RouterUpdated" | "Voted" | "VotingMirrorUpdated"): EventFragment;

    encodeFunctionData(functionFragment: 'allowlistDestChain', values: [BigNumberish, boolean]): string;
encodeFunctionData(functionFragment: 'allowlistReceiver', values: [BytesLike, boolean]): string;
encodeFunctionData(functionFragment: 'allowlistedDestChains', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'allowlistedReceivers', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'claims', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'finalizeClaim', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'gasLimitByChain', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'hasVoted', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'nextClaimId', values?: undefined): string;
encodeFunctionData(functionFragment: 'openClaim', values: [BytesLike, AddressLike, BigNumberish, BigNumberish, BytesLike]): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'policyManager', values?: undefined): string;
encodeFunctionData(functionFragment: 'quorumBps', values?: undefined): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'router', values?: undefined): string;
encodeFunctionData(functionFragment: 'setGasLimit', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'setParams', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'setPolicyManager', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'setRouter', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'setVotingMirror', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'voteNo', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'voteYes', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'votingMirror', values?: undefined): string;
encodeFunctionData(functionFragment: 'votingPeriodSeconds', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'allowlistDestChain', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'allowlistReceiver', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'allowlistedDestChains', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'allowlistedReceivers', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'claims', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'finalizeClaim', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'gasLimitByChain', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hasVoted', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'nextClaimId', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'openClaim', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'policyManager', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'quorumBps', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'router', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setGasLimit', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setParams', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setPolicyManager', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setRouter', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setVotingMirror', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'voteNo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'voteYes', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'votingMirror', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'votingPeriodSeconds', data: BytesLike): Result;
  }

  
    export namespace ClaimFinalizedEvent {
      export type InputTuple = [claimId: BigNumberish, approved: boolean];
      export type OutputTuple = [claimId: bigint, approved: boolean];
      export interface OutputObject {claimId: bigint, approved: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ClaimOpenedEvent {
      export type InputTuple = [claimId: BigNumberish, policyId: BytesLike, claimant: AddressLike, amount: BigNumberish];
      export type OutputTuple = [claimId: bigint, policyId: string, claimant: string, amount: bigint];
      export interface OutputObject {claimId: bigint, policyId: string, claimant: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace DestAllowlistedEvent {
      export type InputTuple = [selector: BigNumberish, allowed: boolean];
      export type OutputTuple = [selector: bigint, allowed: boolean];
      export interface OutputObject {selector: bigint, allowed: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace GasLimitSetEvent {
      export type InputTuple = [selector: BigNumberish, gasLimit: BigNumberish];
      export type OutputTuple = [selector: bigint, gasLimit: bigint];
      export interface OutputObject {selector: bigint, gasLimit: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ParamsUpdatedEvent {
      export type InputTuple = [votingPeriodSeconds: BigNumberish, quorumBps: BigNumberish];
      export type OutputTuple = [votingPeriodSeconds: bigint, quorumBps: bigint];
      export interface OutputObject {votingPeriodSeconds: bigint, quorumBps: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PayoutSentEvent {
      export type InputTuple = [claimId: BigNumberish, messageId: BytesLike, amount: BigNumberish, claimant: AddressLike];
      export type OutputTuple = [claimId: bigint, messageId: string, amount: bigint, claimant: string];
      export interface OutputObject {claimId: bigint, messageId: string, amount: bigint, claimant: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PolicyManagerUpdatedEvent {
      export type InputTuple = [policyManager: AddressLike];
      export type OutputTuple = [policyManager: string];
      export interface OutputObject {policyManager: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ReceiverAllowlistedEvent {
      export type InputTuple = [receiver: BytesLike, allowed: boolean];
      export type OutputTuple = [receiver: string, allowed: boolean];
      export interface OutputObject {receiver: string, allowed: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RouterUpdatedEvent {
      export type InputTuple = [router: AddressLike];
      export type OutputTuple = [router: string];
      export interface OutputObject {router: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace VotedEvent {
      export type InputTuple = [claimId: BigNumberish, voter: AddressLike, support: boolean, weight: BigNumberish];
      export type OutputTuple = [claimId: bigint, voter: string, support: boolean, weight: bigint];
      export interface OutputObject {claimId: bigint, voter: string, support: boolean, weight: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace VotingMirrorUpdatedEvent {
      export type InputTuple = [mirror: AddressLike];
      export type OutputTuple = [mirror: string];
      export interface OutputObject {mirror: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface ClaimManager extends BaseContract {
    
    connect(runner?: ContractRunner | null): ClaimManager;
    waitForDeployment(): Promise<this>;

    interface: ClaimManagerInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    allowlistDestChain: TypedContractMethod<
      [sel: BigNumberish, allowed: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    allowlistReceiver: TypedContractMethod<
      [r: BytesLike, allowed: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    allowlistedDestChains: TypedContractMethod<
      [arg0: BigNumberish, ],
      [boolean],
      'view'
    >
    

    
    allowlistedReceivers: TypedContractMethod<
      [arg0: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    claims: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, string, bigint, bigint, bigint, bigint, string, boolean, boolean, bigint, bigint] & {policyId: string, claimant: string, amount: bigint, startTs: bigint, endTs: bigint, dstChainSelector: bigint, dstPayoutVault: string, finalized: boolean, approved: boolean, yes: bigint, no: bigint }],
      'view'
    >
    

    
    finalizeClaim: TypedContractMethod<
      [claimId: BigNumberish, ],
      [void],
      'payable'
    >
    

    
    gasLimitByChain: TypedContractMethod<
      [arg0: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    hasVoted: TypedContractMethod<
      [arg0: BigNumberish, arg1: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    nextClaimId: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    openClaim: TypedContractMethod<
      [policyId: BytesLike, claimantOnArbitrum: AddressLike, amountPYUSD: BigNumberish, dstChainSelector: BigNumberish, dstPayoutVault: BytesLike, ],
      [bigint],
      'nonpayable'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    policyManager: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    quorumBps: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    router: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    setGasLimit: TypedContractMethod<
      [sel: BigNumberish, gasLimit: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    setParams: TypedContractMethod<
      [_votingPeriodSeconds: BigNumberish, _quorumBps: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    setPolicyManager: TypedContractMethod<
      [p: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    setRouter: TypedContractMethod<
      [_router: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    setVotingMirror: TypedContractMethod<
      [m: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    voteNo: TypedContractMethod<
      [claimId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    voteYes: TypedContractMethod<
      [claimId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    votingMirror: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    votingPeriodSeconds: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'allowlistDestChain'): TypedContractMethod<
      [sel: BigNumberish, allowed: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'allowlistReceiver'): TypedContractMethod<
      [r: BytesLike, allowed: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'allowlistedDestChains'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'allowlistedReceivers'): TypedContractMethod<
      [arg0: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'claims'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, string, bigint, bigint, bigint, bigint, string, boolean, boolean, bigint, bigint] & {policyId: string, claimant: string, amount: bigint, startTs: bigint, endTs: bigint, dstChainSelector: bigint, dstPayoutVault: string, finalized: boolean, approved: boolean, yes: bigint, no: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'finalizeClaim'): TypedContractMethod<
      [claimId: BigNumberish, ],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'gasLimitByChain'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'hasVoted'): TypedContractMethod<
      [arg0: BigNumberish, arg1: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'nextClaimId'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'openClaim'): TypedContractMethod<
      [policyId: BytesLike, claimantOnArbitrum: AddressLike, amountPYUSD: BigNumberish, dstChainSelector: BigNumberish, dstPayoutVault: BytesLike, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'policyManager'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'quorumBps'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'router'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'setGasLimit'): TypedContractMethod<
      [sel: BigNumberish, gasLimit: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setParams'): TypedContractMethod<
      [_votingPeriodSeconds: BigNumberish, _quorumBps: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setPolicyManager'): TypedContractMethod<
      [p: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setRouter'): TypedContractMethod<
      [_router: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setVotingMirror'): TypedContractMethod<
      [m: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'voteNo'): TypedContractMethod<
      [claimId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'voteYes'): TypedContractMethod<
      [claimId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'votingMirror'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'votingPeriodSeconds'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;

    getEvent(key: 'ClaimFinalized'): TypedContractEvent<ClaimFinalizedEvent.InputTuple, ClaimFinalizedEvent.OutputTuple, ClaimFinalizedEvent.OutputObject>;
getEvent(key: 'ClaimOpened'): TypedContractEvent<ClaimOpenedEvent.InputTuple, ClaimOpenedEvent.OutputTuple, ClaimOpenedEvent.OutputObject>;
getEvent(key: 'DestAllowlisted'): TypedContractEvent<DestAllowlistedEvent.InputTuple, DestAllowlistedEvent.OutputTuple, DestAllowlistedEvent.OutputObject>;
getEvent(key: 'GasLimitSet'): TypedContractEvent<GasLimitSetEvent.InputTuple, GasLimitSetEvent.OutputTuple, GasLimitSetEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'ParamsUpdated'): TypedContractEvent<ParamsUpdatedEvent.InputTuple, ParamsUpdatedEvent.OutputTuple, ParamsUpdatedEvent.OutputObject>;
getEvent(key: 'PayoutSent'): TypedContractEvent<PayoutSentEvent.InputTuple, PayoutSentEvent.OutputTuple, PayoutSentEvent.OutputObject>;
getEvent(key: 'PolicyManagerUpdated'): TypedContractEvent<PolicyManagerUpdatedEvent.InputTuple, PolicyManagerUpdatedEvent.OutputTuple, PolicyManagerUpdatedEvent.OutputObject>;
getEvent(key: 'ReceiverAllowlisted'): TypedContractEvent<ReceiverAllowlistedEvent.InputTuple, ReceiverAllowlistedEvent.OutputTuple, ReceiverAllowlistedEvent.OutputObject>;
getEvent(key: 'RouterUpdated'): TypedContractEvent<RouterUpdatedEvent.InputTuple, RouterUpdatedEvent.OutputTuple, RouterUpdatedEvent.OutputObject>;
getEvent(key: 'Voted'): TypedContractEvent<VotedEvent.InputTuple, VotedEvent.OutputTuple, VotedEvent.OutputObject>;
getEvent(key: 'VotingMirrorUpdated'): TypedContractEvent<VotingMirrorUpdatedEvent.InputTuple, VotingMirrorUpdatedEvent.OutputTuple, VotingMirrorUpdatedEvent.OutputObject>;

    filters: {
      
      'ClaimFinalized(uint256,bool)': TypedContractEvent<ClaimFinalizedEvent.InputTuple, ClaimFinalizedEvent.OutputTuple, ClaimFinalizedEvent.OutputObject>;
      ClaimFinalized: TypedContractEvent<ClaimFinalizedEvent.InputTuple, ClaimFinalizedEvent.OutputTuple, ClaimFinalizedEvent.OutputObject>;
    

      'ClaimOpened(uint256,bytes32,address,uint256)': TypedContractEvent<ClaimOpenedEvent.InputTuple, ClaimOpenedEvent.OutputTuple, ClaimOpenedEvent.OutputObject>;
      ClaimOpened: TypedContractEvent<ClaimOpenedEvent.InputTuple, ClaimOpenedEvent.OutputTuple, ClaimOpenedEvent.OutputObject>;
    

      'DestAllowlisted(uint64,bool)': TypedContractEvent<DestAllowlistedEvent.InputTuple, DestAllowlistedEvent.OutputTuple, DestAllowlistedEvent.OutputObject>;
      DestAllowlisted: TypedContractEvent<DestAllowlistedEvent.InputTuple, DestAllowlistedEvent.OutputTuple, DestAllowlistedEvent.OutputObject>;
    

      'GasLimitSet(uint64,uint256)': TypedContractEvent<GasLimitSetEvent.InputTuple, GasLimitSetEvent.OutputTuple, GasLimitSetEvent.OutputObject>;
      GasLimitSet: TypedContractEvent<GasLimitSetEvent.InputTuple, GasLimitSetEvent.OutputTuple, GasLimitSetEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'ParamsUpdated(uint256,uint256)': TypedContractEvent<ParamsUpdatedEvent.InputTuple, ParamsUpdatedEvent.OutputTuple, ParamsUpdatedEvent.OutputObject>;
      ParamsUpdated: TypedContractEvent<ParamsUpdatedEvent.InputTuple, ParamsUpdatedEvent.OutputTuple, ParamsUpdatedEvent.OutputObject>;
    

      'PayoutSent(uint256,bytes32,uint256,address)': TypedContractEvent<PayoutSentEvent.InputTuple, PayoutSentEvent.OutputTuple, PayoutSentEvent.OutputObject>;
      PayoutSent: TypedContractEvent<PayoutSentEvent.InputTuple, PayoutSentEvent.OutputTuple, PayoutSentEvent.OutputObject>;
    

      'PolicyManagerUpdated(address)': TypedContractEvent<PolicyManagerUpdatedEvent.InputTuple, PolicyManagerUpdatedEvent.OutputTuple, PolicyManagerUpdatedEvent.OutputObject>;
      PolicyManagerUpdated: TypedContractEvent<PolicyManagerUpdatedEvent.InputTuple, PolicyManagerUpdatedEvent.OutputTuple, PolicyManagerUpdatedEvent.OutputObject>;
    

      'ReceiverAllowlisted(bytes,bool)': TypedContractEvent<ReceiverAllowlistedEvent.InputTuple, ReceiverAllowlistedEvent.OutputTuple, ReceiverAllowlistedEvent.OutputObject>;
      ReceiverAllowlisted: TypedContractEvent<ReceiverAllowlistedEvent.InputTuple, ReceiverAllowlistedEvent.OutputTuple, ReceiverAllowlistedEvent.OutputObject>;
    

      'RouterUpdated(address)': TypedContractEvent<RouterUpdatedEvent.InputTuple, RouterUpdatedEvent.OutputTuple, RouterUpdatedEvent.OutputObject>;
      RouterUpdated: TypedContractEvent<RouterUpdatedEvent.InputTuple, RouterUpdatedEvent.OutputTuple, RouterUpdatedEvent.OutputObject>;
    

      'Voted(uint256,address,bool,uint256)': TypedContractEvent<VotedEvent.InputTuple, VotedEvent.OutputTuple, VotedEvent.OutputObject>;
      Voted: TypedContractEvent<VotedEvent.InputTuple, VotedEvent.OutputTuple, VotedEvent.OutputObject>;
    

      'VotingMirrorUpdated(address)': TypedContractEvent<VotingMirrorUpdatedEvent.InputTuple, VotingMirrorUpdatedEvent.OutputTuple, VotingMirrorUpdatedEvent.OutputObject>;
      VotingMirrorUpdated: TypedContractEvent<VotingMirrorUpdatedEvent.InputTuple, VotingMirrorUpdatedEvent.OutputTuple, VotingMirrorUpdatedEvent.OutputObject>;
    
    };
  }